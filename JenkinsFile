pipeline {
    agent {
        label 'master' // Use the master agent for the entire pipeline
    }

    environment {
        GIT_REPO = 'https://github.com/Arsenet7/carles-project.git'
        BRANCH_NAME = 'main'  // Branch to check out
        SONARQUBE_TOKEN = credentials('arsene-sonar-token') // SonarQube credentials
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Cloning the GitHub repository
                git branch: "${BRANCH_NAME}", url: "${GIT_REPO}"
            }
        }

        stage('Build and Test') {
            agent {
                docker {
                    image 'maven:3.8.5-openjdk-18' // Use a Maven Docker image with JDK 18
                    args '-u root' // Run as root if needed
                }
            }
            steps {
                // Building and testing the Java project
                sh '''
                mvn --version
                mvn clean package
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('scan') {  // Use the SonarQube scanner name in Jenkins configuration
                    sh '''
                    mvn sonar:sonar \
                      -Dsonar.projectKey=carl-project \
                      -Dsonar.host.url=https://sonarqube.devopseasylearning.uk \
                      -Dsonar.login=${SONARQUBE_TOKEN}
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'This will run after every build, regardless of the build result'
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
        unstable {
            echo 'Build is unstable!'
        }
    }
}
